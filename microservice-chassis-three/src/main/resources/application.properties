logging.pattern.console=[Chassis Three] %clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(---){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}
server.port=8887

#spring.datasource.url=jdbc:postgresql://localhost:5432/spring_microservice_db
#   no need, credential will be taken from vault
#    username: postgres_user
#    password: postgres_password
#spring.datasource.username=springuser
#spring.datasource.password=springpass
# use those credentials if you use docker cpompose and potgres service is NOT commented
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres_user
spring.datasource.password=postgres_password
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.default_schema=ms_chassis_three

spring.main.banner-mode=off
spring.devtools.restart.additional-paths=conf/**
spring.kafka.listener.missing-topics-fatal=false
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.group-id=ms-chassis-three-cg
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.cloud.consul.discovery.prefer-ip-address=true
spring.cloud.consul.discovery.health-check-path=/ping
spring.cloud.consul.discovery.instance-id=microservice-chassis-three-${random.int}

spring.cloud.bootstrap.enabled=true
